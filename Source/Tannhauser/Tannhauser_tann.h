/*
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE TANNHÄUSER PD COMPILER.
 * THIS HEADER DEFINES THE EXTERNAL TANNHÄUSER API.
 */

#ifndef _TANNHAUSER_TANN_H_
#define _TANNHAUSER_TANN_H_

#include "TannBase.h"

#define Context(_x) ((Tann_tann *) (_x))

// object includes
#include "DspAdd.h"
#include "DspHip.h"
#include "DspLop.h"
#include "MessageAdd.h"
#include "MessageFloat.h"
#include "MessageLine.h"
#include "MessageMultiply.h"

typedef struct Tann_tann {
	TannBase base;
	
	// objects
	DspLop dLop_sqWoz;
	DspHip dHip_dFCVc;
	DspLop dLop_TI3Tv;
	DspHip dHip_dQaBO;
	MessageFloat mFloat_4jxjT;
	MessageLine mLine_AWNAP;
	MessageMultiply mMultiply_DBp8o;
	MessageLine mLine_oCE96;
	MessageAdd mAdd_cwxsY;
	MessageFloat mFloat_hu1oi;
	MessageFloat mFloat_yd3Kz;
	MessageFloat mFloat_DUfyp;
	MessageLine mLine_aWQ6l;
	MessageLine mLine_6sIrH;
	MessageMultiply mMultiply_9FtZE;
	MessageAdd mAdd_WNQjE;
} Tann_tann;

Tann_tann *ctx_tann_new(int numInputChannels, int numOutputChannels, int nominalBlockSize, double sampleRate);

void ctx_tann_free(Tann_tann *c);

/**
 * Note that the block size (n) may be different from the nominal block size reported at
 * initialisation. Note that input and output buffers _MUST_ be independent non-overlapping
 * regions in memory.
 */
void ctx_tann_process(Tann_tann *_c, float *inputBuffers, float *outputBuffer, int n);

static inline TannBase *ctx_tann_getBase(Tann_tann *_c) {
	return &_c->base;
}

#endif // _TANNHAUSER_TANN_H_
